var DateFormatter; !function () { "use strict"; var e, t, a, n, r; e = function (e, t) { return "string" == typeof e && "string" == typeof t && e.toLowerCase() === t.toLowerCase() }, t = function (e, a, n) { var r = e.toString(); return n = n || "0", r.length < a ? t(n + r, a) : r }, a = function (e) { var t, n; for (e = e || {}, t = 1; t < arguments.length; t++)if (n = arguments[t]) for (var r in n) n.hasOwnProperty(r) && ("object" == typeof n[r] ? a(e[r], n[r]) : e[r] = n[r]); return e }, n = function (e, t) { for (var a = 0; a < t.length; a++)if (t[a].toLowerCase() === e.toLowerCase()) return a; return -1 }, r = { dateSettings: { days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], meridiem: ["AM", "PM"], ordinal: function (e) { var t = e % 10, a = { 1: "st", 2: "nd", 3: "rd" }; return 1 !== Math.floor(e % 100 / 10) && a[t] ? a[t] : "th" } }, separators: /[ \-+\/\.T:@]/g, validParts: /[dDjlNSwzWFmMntLoYyaABgGhHisueTIOPZcrU]/g, intParts: /[djwNzmnyYhHgGis]/g, tzParts: /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g, tzClip: /[^-+\dA-Z]/g }, (DateFormatter = function (e) { var t = a(r, e); this.dateSettings = t.dateSettings, this.separators = t.separators, this.validParts = t.validParts, this.intParts = t.intParts, this.tzParts = t.tzParts, this.tzClip = t.tzClip }).prototype = { constructor: DateFormatter, getMonth: function (e) { var t; return 0 === (t = n(e, this.dateSettings.monthsShort) + 1) && (t = n(e, this.dateSettings.months) + 1), t }, parseDate: function (t, a) { var n, r, o, i, s, d, u, l, f, c, h = !1, m = !1, g = this.dateSettings, p = { date: null, year: null, month: null, day: null, hour: 0, min: 0, sec: 0 }; if (!t) return null; if (t instanceof Date) return t; if ("U" === a) return (o = parseInt(t)) ? new Date(1e3 * o) : t; switch (typeof t) { case "number": return new Date(t); case "string": break; default: return null }if (!(n = a.match(this.validParts)) || 0 === n.length) throw new Error("Invalid date format definition."); for (r = t.replace(this.separators, "\0").replace(/\0{2,}/g, "\0").split("\0"), o = 0; o < r.length; o++)switch (i = r[o], s = parseInt(i), n[o]) { case "y": case "Y": if (!s) return null; f = i.length, p.year = 2 === f ? parseInt((s < 70 ? "20" : "19") + i) : s, h = !0; break; case "m": case "n": case "M": case "F": if (isNaN(s)) { if (!((d = this.getMonth(i)) > 0)) return null; p.month = d } else { if (!(s >= 1 && s <= 12)) return null; p.month = s } h = !0; break; case "d": case "j": if (!(s >= 1 && s <= 31)) return null; p.day = s, h = !0; break; case "g": case "h": if (c = r[u = n.indexOf("a") > -1 ? n.indexOf("a") : n.indexOf("A") > -1 ? n.indexOf("A") : -1], -1 !== u) l = e(c, g.meridiem[0]) ? 0 : e(c, g.meridiem[1]) ? 12 : -1, s >= 1 && s <= 12 && -1 !== l ? p.hour = s % 12 == 0 ? l : s + l : s >= 0 && s <= 23 && (p.hour = s); else { if (!(s >= 0 && s <= 23)) return null; p.hour = s } m = !0; break; case "G": case "H": if (!(s >= 0 && s <= 23)) return null; p.hour = s, m = !0; break; case "i": if (!(s >= 0 && s <= 59)) return null; p.min = s, m = !0; break; case "s": if (!(s >= 0 && s <= 59)) return null; p.sec = s, m = !0 }if (!0 === h && p.year && p.month && p.day) p.date = new Date(p.year, p.month - 1, p.day, p.hour, p.min, p.sec, 0); else { if (!0 !== m) return null; p.date = new Date(0, 0, 0, p.hour, p.min, p.sec, 0) } return p.date }, guessDate: function (e, t) { if ("string" != typeof e) return e; var a, n, r, o, i, s, d = e.replace(this.separators, "\0").split("\0"), u = t.match(this.validParts), l = new Date, f = 0; if (!/^[djmn]/g.test(u[0])) return e; for (r = 0; r < d.length; r++) { if (f = 2, i = d[r], s = parseInt(i.substr(0, 2)), isNaN(s)) return null; switch (r) { case 0: "m" === u[0] || "n" === u[0] ? l.setMonth(s - 1) : l.setDate(s); break; case 1: "m" === u[0] || "n" === u[0] ? l.setDate(s) : l.setMonth(s - 1); break; case 2: if (n = l.getFullYear(), f = (a = i.length) < 4 ? a : 4, !(n = parseInt(a < 4 ? n.toString().substr(0, 4 - a) + i : i.substr(0, 4)))) return null; l.setFullYear(n); break; case 3: l.setHours(s); break; case 4: l.setMinutes(s); break; case 5: l.setSeconds(s) }(o = i.substr(f)).length > 0 && d.splice(r + 1, 0, o) } return l }, parseFormat: function (e, a) { var n, r = this, o = r.dateSettings, i = /\\?(.?)/gi, s = function (e, t) { return n[e] ? n[e]() : t }; return n = { d: function () { return t(n.j(), 2) }, D: function () { return o.daysShort[n.w()] }, j: function () { return a.getDate() }, l: function () { return o.days[n.w()] }, N: function () { return n.w() || 7 }, w: function () { return a.getDay() }, z: function () { var e = new Date(n.Y(), n.n() - 1, n.j()), t = new Date(n.Y(), 0, 1); return Math.round((e - t) / 864e5) }, W: function () { var e = new Date(n.Y(), n.n() - 1, n.j() - n.N() + 3), a = new Date(e.getFullYear(), 0, 4); return t(1 + Math.round((e - a) / 864e5 / 7), 2) }, F: function () { return o.months[a.getMonth()] }, m: function () { return t(n.n(), 2) }, M: function () { return o.monthsShort[a.getMonth()] }, n: function () { return a.getMonth() + 1 }, t: function () { return new Date(n.Y(), n.n(), 0).getDate() }, L: function () { var e = n.Y(); return e % 4 == 0 && e % 100 != 0 || e % 400 == 0 ? 1 : 0 }, o: function () { var e = n.n(), t = n.W(); return n.Y() + (12 === e && t < 9 ? 1 : 1 === e && t > 9 ? -1 : 0) }, Y: function () { return a.getFullYear() }, y: function () { return n.Y().toString().slice(-2) }, a: function () { return n.A().toLowerCase() }, A: function () { var e = n.G() < 12 ? 0 : 1; return o.meridiem[e] }, B: function () { var e = 3600 * a.getUTCHours(), n = 60 * a.getUTCMinutes(), r = a.getUTCSeconds(); return t(Math.floor((e + n + r + 3600) / 86.4) % 1e3, 3) }, g: function () { return n.G() % 12 || 12 }, G: function () { return a.getHours() }, h: function () { return t(n.g(), 2) }, H: function () { return t(n.G(), 2) }, i: function () { return t(a.getMinutes(), 2) }, s: function () { return t(a.getSeconds(), 2) }, u: function () { return t(1e3 * a.getMilliseconds(), 6) }, e: function () { return /\((.*)\)/.exec(String(a))[1] || "Coordinated Universal Time" }, I: function () { return new Date(n.Y(), 0) - Date.UTC(n.Y(), 0) != new Date(n.Y(), 6) - Date.UTC(n.Y(), 6) ? 1 : 0 }, O: function () { var e = a.getTimezoneOffset(), n = Math.abs(e); return (e > 0 ? "-" : "+") + t(100 * Math.floor(n / 60) + n % 60, 4) }, P: function () { var e = n.O(); return e.substr(0, 3) + ":" + e.substr(3, 2) }, T: function () { return (String(a).match(r.tzParts) || [""]).pop().replace(r.tzClip, "") || "UTC" }, Z: function () { return 60 * -a.getTimezoneOffset() }, c: function () { return "Y-m-d\\TH:i:sP".replace(i, s) }, r: function () { return "D, d M Y H:i:s O".replace(i, s) }, U: function () { return a.getTime() / 1e3 || 0 } }, s(e, e) }, formatDate: function (e, t) { var a, n, r, o, i, s = ""; if ("string" == typeof e && !(e = this.parseDate(e, t))) return null; if (e instanceof Date) { for (r = t.length, a = 0; a < r; a++)"S" !== (i = t.charAt(a)) && "\\" !== i && (a > 0 && "\\" === t.charAt(a - 1) ? s += i : (o = this.parseFormat(i, e), a !== r - 1 && this.intParts.test(i) && "S" === t.charAt(a + 1) && (n = parseInt(o) || 0, o += this.dateSettings.ordinal(n)), s += o)); return s } return "" } } }(), function (e) { "function" == typeof define && define.amd ? define(["jquery", "jquery-mousewheel"], e) : "object" == typeof exports ? module.exports = e : e(jQuery) }(function (e) { "use strict"; var t = { i18n: { ar: { months: ["كانون الثاني", "شباط", "آذار", "نيسان", "مايو", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول"], dayOfWeekShort: ["ن", "ث", "ع", "خ", "ج", "س", "ح"], dayOfWeek: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت", "الأحد"] }, ro: { months: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"], dayOfWeekShort: ["Du", "Lu", "Ma", "Mi", "Jo", "Vi", "Sâ"], dayOfWeek: ["Duminică", "Luni", "Marţi", "Miercuri", "Joi", "Vineri", "Sâmbătă"] }, id: { months: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"], dayOfWeekShort: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"], dayOfWeek: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"] }, is: { months: ["Janúar", "Febrúar", "Mars", "Apríl", "Maí", "Júní", "Júlí", "Ágúst", "September", "Október", "Nóvember", "Desember"], dayOfWeekShort: ["Sun", "Mán", "Þrið", "Mið", "Fim", "Fös", "Lau"], dayOfWeek: ["Sunnudagur", "Mánudagur", "Þriðjudagur", "Miðvikudagur", "Fimmtudagur", "Föstudagur", "Laugardagur"] }, bg: { months: ["Януари", "Февруари", "Март", "Април", "Май", "Юни", "Юли", "Август", "Септември", "Октомври", "Ноември", "Декември"], dayOfWeekShort: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], dayOfWeek: ["Неделя", "Понеделник", "Вторник", "Сряда", "Четвъртък", "Петък", "Събота"] }, fa: { months: ["فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند"], dayOfWeekShort: ["یکشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"], dayOfWeek: ["یک‌شنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنج‌شنبه", "جمعه", "شنبه", "یک‌شنبه"] }, ru: { months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"], dayOfWeekShort: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], dayOfWeek: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"] }, uk: { months: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"], dayOfWeekShort: ["Ндл", "Пнд", "Втр", "Срд", "Чтв", "Птн", "Сбт"], dayOfWeek: ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П'ятниця", "Субота"] }, en: { months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], dayOfWeekShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayOfWeek: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] }, el: { months: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος"], dayOfWeekShort: ["Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ"], dayOfWeek: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"] }, de: { months: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"], dayOfWeekShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"], dayOfWeek: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"] }, nl: { months: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"], dayOfWeekShort: ["zo", "ma", "di", "wo", "do", "vr", "za"], dayOfWeek: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"] }, tr: { months: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"], dayOfWeekShort: ["Paz", "Pts", "Sal", "Çar", "Per", "Cum", "Cts"], dayOfWeek: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"] }, fr: { months: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"], dayOfWeekShort: ["Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam"], dayOfWeek: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"] }, es: { months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"], dayOfWeekShort: ["Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb"], dayOfWeek: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"] }, th: { months: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"], dayOfWeekShort: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."], dayOfWeek: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัส", "ศุกร์", "เสาร์", "อาทิตย์"] }, pl: { months: ["styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień"], dayOfWeekShort: ["nd", "pn", "wt", "śr", "cz", "pt", "sb"], dayOfWeek: ["niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"] }, pt: { months: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], dayOfWeekShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"], dayOfWeek: ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"] }, ch: { months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], dayOfWeekShort: ["日", "一", "二", "三", "四", "五", "六"] }, se: { months: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"], dayOfWeekShort: ["Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör"] }, km: { months: ["មករា​", "កុម្ភៈ", "មិនា​", "មេសា​", "ឧសភា​", "មិថុនា​", "កក្កដា​", "សីហា​", "កញ្ញា​", "តុលា​", "វិច្ឋិកា​", "ធ្នូ​"], dayOfWeekShort: ["អាទិ​", "ចន្ទ​", "អង្គារ​", "ពុធ​", "ព្រហ​​", "សុក្រ​", "សៅរ៍"], dayOfWeek: ["អាទិត្យ​", "ចន្ទ​", "អង្គារ​", "ពុធ​", "ព្រហស្បតិ៍​", "សុក្រ​", "សៅរ៍"] }, kr: { months: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"], dayOfWeekShort: ["일", "월", "화", "수", "목", "금", "토"], dayOfWeek: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"] }, it: { months: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"], dayOfWeekShort: ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"], dayOfWeek: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"] }, da: { months: ["January", "Februar", "Marts", "April", "Maj", "Juni", "July", "August", "September", "Oktober", "November", "December"], dayOfWeekShort: ["Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør"], dayOfWeek: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"] }, no: { months: ["Januar", "Februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"], dayOfWeekShort: ["Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør"], dayOfWeek: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"] }, ja: { months: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], dayOfWeekShort: ["日", "月", "火", "水", "木", "金", "土"], dayOfWeek: ["日曜", "月曜", "火曜", "水曜", "木曜", "金曜", "土曜"] }, vi: { months: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"], dayOfWeekShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"], dayOfWeek: ["Chủ nhật", "Thứ hai", "Thứ ba", "Thứ tư", "Thứ năm", "Thứ sáu", "Thứ bảy"] }, sl: { months: ["Januar", "Februar", "Marec", "April", "Maj", "Junij", "Julij", "Avgust", "September", "Oktober", "November", "December"], dayOfWeekShort: ["Ned", "Pon", "Tor", "Sre", "Čet", "Pet", "Sob"], dayOfWeek: ["Nedelja", "Ponedeljek", "Torek", "Sreda", "Četrtek", "Petek", "Sobota"] }, cs: { months: ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"], dayOfWeekShort: ["Ne", "Po", "Út", "St", "Čt", "Pá", "So"] }, hu: { months: ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"], dayOfWeekShort: ["Va", "Hé", "Ke", "Sze", "Cs", "Pé", "Szo"], dayOfWeek: ["vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"] }, az: { months: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "Iyun", "Iyul", "Avqust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr"], dayOfWeekShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"], dayOfWeek: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"] }, bs: { months: ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"], dayOfWeekShort: ["Ned", "Pon", "Uto", "Sri", "Čet", "Pet", "Sub"], dayOfWeek: ["Nedjelja", "Ponedjeljak", "Utorak", "Srijeda", "Četvrtak", "Petak", "Subota"] }, ca: { months: ["Gener", "Febrer", "Març", "Abril", "Maig", "Juny", "Juliol", "Agost", "Setembre", "Octubre", "Novembre", "Desembre"], dayOfWeekShort: ["Dg", "Dl", "Dt", "Dc", "Dj", "Dv", "Ds"], dayOfWeek: ["Diumenge", "Dilluns", "Dimarts", "Dimecres", "Dijous", "Divendres", "Dissabte"] }, "en-GB": { months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], dayOfWeekShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayOfWeek: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] }, et: { months: ["Jaanuar", "Veebruar", "Märts", "Aprill", "Mai", "Juuni", "Juuli", "August", "September", "Oktoober", "November", "Detsember"], dayOfWeekShort: ["P", "E", "T", "K", "N", "R", "L"], dayOfWeek: ["Pühapäev", "Esmaspäev", "Teisipäev", "Kolmapäev", "Neljapäev", "Reede", "Laupäev"] }, eu: { months: ["Urtarrila", "Otsaila", "Martxoa", "Apirila", "Maiatza", "Ekaina", "Uztaila", "Abuztua", "Iraila", "Urria", "Azaroa", "Abendua"], dayOfWeekShort: ["Ig.", "Al.", "Ar.", "Az.", "Og.", "Or.", "La."], dayOfWeek: ["Igandea", "Astelehena", "Asteartea", "Asteazkena", "Osteguna", "Ostirala", "Larunbata"] }, fi: { months: ["Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kesäkuu", "Heinäkuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu"], dayOfWeekShort: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"], dayOfWeek: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"] }, gl: { months: ["Xan", "Feb", "Maz", "Abr", "Mai", "Xun", "Xul", "Ago", "Set", "Out", "Nov", "Dec"], dayOfWeekShort: ["Dom", "Lun", "Mar", "Mer", "Xov", "Ven", "Sab"], dayOfWeek: ["Domingo", "Luns", "Martes", "Mércores", "Xoves", "Venres", "Sábado"] }, hr: { months: ["Siječanj", "Veljača", "Ožujak", "Travanj", "Svibanj", "Lipanj", "Srpanj", "Kolovoz", "Rujan", "Listopad", "Studeni", "Prosinac"], dayOfWeekShort: ["Ned", "Pon", "Uto", "Sri", "Čet", "Pet", "Sub"], dayOfWeek: ["Nedjelja", "Ponedjeljak", "Utorak", "Srijeda", "Četvrtak", "Petak", "Subota"] }, ko: { months: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"], dayOfWeekShort: ["일", "월", "화", "수", "목", "금", "토"], dayOfWeek: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"] }, lt: { months: ["Sausio", "Vasario", "Kovo", "Balandžio", "Gegužės", "Birželio", "Liepos", "Rugpjūčio", "Rugsėjo", "Spalio", "Lapkričio", "Gruodžio"], dayOfWeekShort: ["Sek", "Pir", "Ant", "Tre", "Ket", "Pen", "Šeš"], dayOfWeek: ["Sekmadienis", "Pirmadienis", "Antradienis", "Trečiadienis", "Ketvirtadienis", "Penktadienis", "Šeštadienis"] }, lv: { months: ["Janvāris", "Februāris", "Marts", "Aprīlis ", "Maijs", "Jūnijs", "Jūlijs", "Augusts", "Septembris", "Oktobris", "Novembris", "Decembris"], dayOfWeekShort: ["Sv", "Pr", "Ot", "Tr", "Ct", "Pk", "St"], dayOfWeek: ["Svētdiena", "Pirmdiena", "Otrdiena", "Trešdiena", "Ceturtdiena", "Piektdiena", "Sestdiena"] }, mk: { months: ["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември"], dayOfWeekShort: ["нед", "пон", "вто", "сре", "чет", "пет", "саб"], dayOfWeek: ["Недела", "Понеделник", "Вторник", "Среда", "Четврток", "Петок", "Сабота"] }, mn: { months: ["1-р сар", "2-р сар", "3-р сар", "4-р сар", "5-р сар", "6-р сар", "7-р сар", "8-р сар", "9-р сар", "10-р сар", "11-р сар", "12-р сар"], dayOfWeekShort: ["Дав", "Мяг", "Лха", "Пүр", "Бсн", "Бям", "Ням"], dayOfWeek: ["Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба", "Ням"] }, "pt-BR": { months: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], dayOfWeekShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"], dayOfWeek: ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"] }, sk: { months: ["Január", "Február", "Marec", "Apríl", "Máj", "Jún", "Júl", "August", "September", "Október", "November", "December"], dayOfWeekShort: ["Ne", "Po", "Ut", "St", "Št", "Pi", "So"], dayOfWeek: ["Nedeľa", "Pondelok", "Utorok", "Streda", "Štvrtok", "Piatok", "Sobota"] }, sq: { months: ["Janar", "Shkurt", "Mars", "Prill", "Maj", "Qershor", "Korrik", "Gusht", "Shtator", "Tetor", "Nëntor", "Dhjetor"], dayOfWeekShort: ["Die", "Hën", "Mar", "Mër", "Enj", "Pre", "Shtu"], dayOfWeek: ["E Diel", "E Hënë", "E Martē", "E Mërkurë", "E Enjte", "E Premte", "E Shtunë"] }, "sr-YU": { months: ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"], dayOfWeekShort: ["Ned", "Pon", "Uto", "Sre", "čet", "Pet", "Sub"], dayOfWeek: ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"] }, sr: { months: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар"], dayOfWeekShort: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"], dayOfWeek: ["Недеља", "Понедељак", "Уторак", "Среда", "Четвртак", "Петак", "Субота"] }, sv: { months: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"], dayOfWeekShort: ["Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör"], dayOfWeek: ["Söndag", "Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag"] }, "zh-TW": { months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], dayOfWeekShort: ["日", "一", "二", "三", "四", "五", "六"], dayOfWeek: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"] }, zh: { months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], dayOfWeekShort: ["日", "一", "二", "三", "四", "五", "六"], dayOfWeek: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"] }, he: { months: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"], dayOfWeekShort: ["א'", "ב'", "ג'", "ד'", "ה'", "ו'", "שבת"], dayOfWeek: ["ראשון", "שני", "שלישי", "רביעי", "חמישי", "שישי", "שבת", "ראשון"] }, hy: { months: ["Հունվար", "Փետրվար", "Մարտ", "Ապրիլ", "Մայիս", "Հունիս", "Հուլիս", "Օգոստոս", "Սեպտեմբեր", "Հոկտեմբեր", "Նոյեմբեր", "Դեկտեմբեր"], dayOfWeekShort: ["Կի", "Երկ", "Երք", "Չոր", "Հնգ", "Ուրբ", "Շբթ"], dayOfWeek: ["Կիրակի", "Երկուշաբթի", "Երեքշաբթի", "Չորեքշաբթի", "Հինգշաբթի", "Ուրբաթ", "Շաբաթ"] }, kg: { months: ["Үчтүн айы", "Бирдин айы", "Жалган Куран", "Чын Куран", "Бугу", "Кулжа", "Теке", "Баш Оона", "Аяк Оона", "Тогуздун айы", "Жетинин айы", "Бештин айы"], dayOfWeekShort: ["Жек", "Дүй", "Шей", "Шар", "Бей", "Жум", "Ише"], dayOfWeek: ["Жекшемб", "Дүйшөмб", "Шейшемб", "Шаршемб", "Бейшемби", "Жума", "Ишенб"] }, rm: { months: ["Schaner", "Favrer", "Mars", "Avrigl", "Matg", "Zercladur", "Fanadur", "Avust", "Settember", "October", "November", "December"], dayOfWeekShort: ["Du", "Gli", "Ma", "Me", "Gie", "Ve", "So"], dayOfWeek: ["Dumengia", "Glindesdi", "Mardi", "Mesemna", "Gievgia", "Venderdi", "Sonda"] }, ka: { months: ["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი"], dayOfWeekShort: ["კვ", "ორშ", "სამშ", "ოთხ", "ხუთ", "პარ", "შაბ"], dayOfWeek: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"] } }, ownerDocument: document, contentWindow: window, value: "", rtl: !1, format: "Y/m/d H:i", formatTime: "H:i", formatDate: "Y/m/d", startDate: !1, step: 60, monthChangeSpinner: !0, closeOnDateSelect: !1, closeOnTimeSelect: !0, closeOnWithoutClick: !0, closeOnInputClick: !0, timepicker: !0, datepicker: !0, weeks: !1, defaultTime: !1, defaultDate: !1, minDate: !1, maxDate: !1, minTime: !1, maxTime: !1, disabledMinTime: !1, disabledMaxTime: !1, allowTimes: [], opened: !1, initTime: !0, inline: !1, theme: "", onSelectDate: function () { }, onSelectTime: function () { }, onChangeMonth: function () { }, onGetWeekOfYear: function () { }, onChangeYear: function () { }, onChangeDateTime: function () { }, onShow: function () { }, onClose: function () { }, onGenerate: function () { }, withoutCopyright: !0, inverseButton: !1, hours12: !1, next: "xdsoft_next", prev: "xdsoft_prev", dayOfWeekStart: 0, parentID: "body", timeHeightInTimePicker: 25, timepickerScrollbar: !0, todayButton: !0, prevButton: !0, nextButton: !0, defaultSelect: !0, scrollMonth: !0, scrollTime: !0, scrollInput: !1, lazyInit: !1, mask: !1, validateOnBlur: !0, allowBlank: !0, yearStart: 1950, yearEnd: 2050, monthStart: 0, monthEnd: 11, style: "", id: "", fixed: !1, roundTime: "round", className: "", weekends: [], highlightedDates: [], highlightedPeriods: [], allowDates: [], allowDateRe: null, disabledDates: [], disabledWeekDays: [], yearOffset: 0, beforeShowDay: null, enterLikeTab: !0, showApplyButton: !1 }, a = null, n = "en", r = { meridiem: ["AM", "PM"] }, o = function () { var o = t.i18n[n], i = { days: o.dayOfWeek, daysShort: o.dayOfWeekShort, months: o.months, monthsShort: e.map(o.months, function (e) { return e.substring(0, 3) }) }; "function" == typeof DateFormatter && (a = new DateFormatter({ dateSettings: e.extend({}, r, i) })) }; function i(e, t, a) { this.date = e, this.desc = t, this.style = a } e.datetimepicker = { setLocale: function (e) { var a = t.i18n[e] ? e : "en"; n != a && (n = a, o()) }, setDateFormatter: function (e) { a = e }, RFC_2822: "D, d M Y H:i:s O", ATOM: "Y-m-dTH:i:sP", ISO_8601: "Y-m-dTH:i:sO", RFC_822: "D, d M y H:i:s O", RFC_850: "l, d-M-y H:i:s T", RFC_1036: "D, d M y H:i:s O", RFC_1123: "D, d M Y H:i:s O", RSS: "D, d M Y H:i:s O", W3C: "Y-m-dTH:i:sP" }, o(), window.getComputedStyle || (window.getComputedStyle = function (e, t) { return this.el = e, this.getPropertyValue = function (t) { var a = /(\-([a-z]){1})/g; return "float" === t && (t = "styleFloat"), a.test(t) && (t = t.replace(a, function (e, t, a) { return a.toUpperCase() })), e.currentStyle[t] || null }, this }), Array.prototype.indexOf || (Array.prototype.indexOf = function (e, t) { var a, n; for (a = t || 0, n = this.length; a < n; a += 1)if (this[a] === e) return a; return -1 }), Date.prototype.countDaysInMonth = function () { return new Date(this.getFullYear(), this.getMonth() + 1, 0).getDate() }, e.fn.xdsoftScroller = function (t, a) { return this.each(function () { var n, r, o, i, s, d = e(this), u = function (e) { var t, a = { x: 0, y: 0 }; return "touchstart" === e.type || "touchmove" === e.type || "touchend" === e.type || "touchcancel" === e.type ? (t = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0], a.x = t.clientX, a.y = t.clientY) : "mousedown" !== e.type && "mouseup" !== e.type && "mousemove" !== e.type && "mouseover" !== e.type && "mouseout" !== e.type && "mouseenter" !== e.type && "mouseleave" !== e.type || (a.x = e.clientX, a.y = e.clientY), a }, l = 100, f = !1, c = 0, h = 0, m = 0, g = !1, p = 0, y = function () { }; "hide" !== a ? (e(this).hasClass("xdsoft_scroller_box") || (n = d.children().eq(0), r = d[0].clientHeight, o = n[0].offsetHeight, i = e('<div class="xdsoft_scrollbar"></div>'), s = e('<div class="xdsoft_scroller"></div>'), i.append(s), d.addClass("xdsoft_scroller_box").append(i), y = function (e) { var t = u(e).y - c + p; t < 0 && (t = 0), t + s[0].offsetHeight > m && (t = m - s[0].offsetHeight), d.trigger("scroll_element.xdsoft_scroller", [l ? t / l : 0]) }, s.on("touchstart.xdsoft_scroller mousedown.xdsoft_scroller", function (n) { r || d.trigger("resize_scroll.xdsoft_scroller", [a]), c = u(n).y, p = parseInt(s.css("margin-top"), 10), m = i[0].offsetHeight, "mousedown" === n.type || "touchstart" === n.type ? (t.ownerDocument && e(t.ownerDocument.body).addClass("xdsoft_noselect"), e([t.ownerDocument.body, t.contentWindow]).on("touchend mouseup.xdsoft_scroller", function a() { e([t.ownerDocument.body, t.contentWindow]).off("touchend mouseup.xdsoft_scroller", a).off("mousemove.xdsoft_scroller", y).removeClass("xdsoft_noselect") }), e(t.ownerDocument.body).on("mousemove.xdsoft_scroller", y)) : (g = !0, n.stopPropagation(), n.preventDefault()) }).on("touchmove", function (e) { g && (e.preventDefault(), y(e)) }).on("touchend touchcancel", function () { g = !1, p = 0 }), d.on("scroll_element.xdsoft_scroller", function (e, t) { r || d.trigger("resize_scroll.xdsoft_scroller", [t, !0]), t = t > 1 ? 1 : t < 0 || isNaN(t) ? 0 : t, s.css("margin-top", l * t), setTimeout(function () { n.css("marginTop", -parseInt((n[0].offsetHeight - r) * t, 10)) }, 10) }).on("resize_scroll.xdsoft_scroller", function (e, t, a) { var u, f; r = d[0].clientHeight, o = n[0].offsetHeight, f = (u = r / o) * i[0].offsetHeight, u > 1 ? s.hide() : (s.show(), s.css("height", parseInt(f > 10 ? f : 10, 10)), l = i[0].offsetHeight - s[0].offsetHeight, !0 !== a && d.trigger("scroll_element.xdsoft_scroller", [t || Math.abs(parseInt(n.css("marginTop"), 10)) / (o - r)])) }), d.on("mousewheel", function (e) { var t = Math.abs(parseInt(n.css("marginTop"), 10)); return (t -= 20 * e.deltaY) < 0 && (t = 0), d.trigger("scroll_element.xdsoft_scroller", [t / (o - r)]), e.stopPropagation(), !1 }), d.on("touchstart", function (e) { f = u(e), h = Math.abs(parseInt(n.css("marginTop"), 10)) }), d.on("touchmove", function (e) { if (f) { e.preventDefault(); var t = u(e); d.trigger("scroll_element.xdsoft_scroller", [(h - (t.y - f.y)) / (o - r)]) } }), d.on("touchend touchcancel", function () { f = !1, h = 0 })), d.trigger("resize_scroll.xdsoft_scroller", [a])) : d.find(".xdsoft_scrollbar").hide() }) }, e.fn.datetimepicker = function (r, o) { var s, d, u = this, l = 48, f = 57, c = 96, h = 105, m = 17, g = 46, p = 13, y = 27, D = 8, b = 37, v = 38, k = 39, x = 40, S = 9, T = 116, w = 65, O = 67, M = 86, W = 90, _ = 89, C = !1, F = e.isPlainObject(r) || !r ? e.extend(!0, {}, t, r) : e.extend(!0, {}, t), P = 0; return s = function (t) { var o, s, d, u, P, A, Y = e('<div class="xdsoft_datetimepicker xdsoft_noselect"></div>'), j = e('<div class="xdsoft_copyright"><a target="_blank" href="http://xdsoft.net/jqplugins/datetimepicker/">xdsoft.net</a></div>'), H = e('<div class="xdsoft_datepicker active"></div>'), J = e('<div class="xdsoft_monthpicker"><button type="button" class="xdsoft_prev"></button><button type="button" class="xdsoft_today_button"></button><div class="xdsoft_label xdsoft_month"><span></span><i></i></div><div class="xdsoft_label xdsoft_year"><span></span><i></i></div><button type="button" class="xdsoft_next"></button></div>'), z = e('<div class="xdsoft_calendar"></div>'), I = e('<div class="xdsoft_timepicker active"><button type="button" class="xdsoft_prev"></button><div class="xdsoft_time_box"></div><button type="button" class="xdsoft_next"></button></div>'), N = I.find(".xdsoft_time_box").eq(0), L = e('<div class="xdsoft_time_variant"></div>'), E = e('<button type="button" class="xdsoft_save_selected blue-gradient-button">Save Selected</button>'), R = e('<div class="xdsoft_select xdsoft_monthselect"><div></div></div>'), B = e('<div class="xdsoft_select xdsoft_yearselect"><div></div></div>'), V = !1, G = 0; function U() { var e, a = !1; return F.startDate ? a = P.strToDate(F.startDate) : (a = F.value || (t && t.val && t.val() ? t.val() : "")) ? a = P.strToDateTime(a) : F.defaultDate && (a = P.strToDateTime(F.defaultDate), F.defaultTime && (e = P.strtotime(F.defaultTime), a.setHours(e.getHours()), a.setMinutes(e.getMinutes()))), a && P.isValidDate(a) ? Y.data("changed", !0) : a = "", a || 0 } function q(a) { var n = function (e, t) { var a = e.replace(/([\[\]\/\{\}\(\)\-\.\+]{1})/g, "\\$1").replace(/_/g, "{digit+}").replace(/([0-9]{1})/g, "{digit$1}").replace(/\{digit([0-9]{1})\}/g, "[0-$1_]{1}").replace(/\{digit[\+]\}/g, "[0-9_]{1}"); return new RegExp(a).test(t) }, r = function (e, t) { if (!(e = "string" == typeof e || e instanceof String ? a.ownerDocument.getElementById(e) : e)) return !1; if (e.createTextRange) { var n = e.createTextRange(); return n.collapse(!0), n.moveEnd("character", t), n.moveStart("character", t), n.select(), !0 } return !!e.setSelectionRange && (e.setSelectionRange(t, t), !0) }; a.mask && t.off("keydown.xdsoft"), !0 === a.mask && ("undefined" != typeof moment ? a.mask = a.format.replace(/Y{4}/g, "9999").replace(/Y{2}/g, "99").replace(/M{2}/g, "19").replace(/D{2}/g, "39").replace(/H{2}/g, "29").replace(/m{2}/g, "59").replace(/s{2}/g, "59") : a.mask = a.format.replace(/Y/g, "9999").replace(/F/g, "9999").replace(/m/g, "19").replace(/d/g, "39").replace(/H/g, "29").replace(/i/g, "59").replace(/s/g, "59")), "string" === e.type(a.mask) && (n(a.mask, t.val()) || (t.val(a.mask.replace(/[0-9]/g, "_")), r(t[0], 0)), t.on("keydown.xdsoft", function (o) { var i, s, d = this.value, u = o.which; if (u >= l && u <= f || u >= c && u <= h || u === D || u === g) { i = function (e) { try { if (a.ownerDocument.selection && a.ownerDocument.selection.createRange) return a.ownerDocument.selection.createRange().getBookmark().charCodeAt(2) - 2; if (e.setSelectionRange) return e.selectionStart } catch (e) { return 0 } }(this), s = u !== D && u !== g ? String.fromCharCode(c <= u && u <= h ? u - l : u) : "_"; var F = this.selectionEnd - this.selectionStart; if (0 == F) { for (u !== D && u !== g || !i || (i -= 1, s = "_"); /[^0-9_]/.test(a.mask.substr(i, 1)) && i < a.mask.length && i > 0;)i += u === D || u === g ? -1 : 1; if (d = d.substr(0, i) + s + d.substr(i + 1), "" === e.trim(d)) d = a.mask.replace(/[0-9]/g, "_"); else if (i === a.mask.length) return o.preventDefault(), !1; for (i += u === D || u === g ? 0 : 1; /[^0-9_]/.test(a.mask.substr(i, 1)) && i < a.mask.length && i > 0;)i += u === D || u === g ? -1 : 1 } else { for (var P = "", A = 0; A < F; A++)0 == /[0-9_]/.test(a.mask.substr(i + A, 1)) ? P += a.mask.substr(i + A, 1) : P += "_"; d = d.substr(0, i) + P + d.substr(i + F) } n(a.mask, d) ? (this.value = d, r(this, i)) : "" === e.trim(d) ? this.value = a.mask.replace(/[0-9]/g, "_") : t.trigger("error_input.xdsoft") } else if (-1 !== [w, O, M, W, _].indexOf(u) && C || -1 !== [y, v, x, b, k, T, m, S, p].indexOf(u)) return !0; return o.preventDefault(), !1 })) } F.id && Y.attr("id", F.id), F.style && Y.attr("style", F.style), F.weeks && Y.addClass("xdsoft_showweeks"), F.rtl && Y.addClass("xdsoft_rtl"), Y.addClass("xdsoft_" + F.theme), Y.addClass(F.className), J.find(".xdsoft_month span").after(R), J.find(".xdsoft_year span").after(B), J.find(".xdsoft_month,.xdsoft_year").on("touchstart mousedown.xdsoft", function (t) { var a, n, r = e(this).find(".xdsoft_select").eq(0), o = 0, i = 0, s = r.is(":visible"); for (J.find(".xdsoft_select").hide(), P.currentTime && (o = P.currentTime[e(this).hasClass("xdsoft_month") ? "getMonth" : "getFullYear"]()), r[s ? "hide" : "show"](), a = r.find("div.xdsoft_option"), n = 0; n < a.length && a.eq(n).data("value") !== o; n += 1)i += a[0].offsetHeight; return r.xdsoftScroller(F, i / (r.children()[0].offsetHeight - r[0].clientHeight)), t.stopPropagation(), !1 }), J.find(".xdsoft_select").xdsoftScroller(F).on("touchstart mousedown.xdsoft", function (e) { e.stopPropagation(), e.preventDefault() }).on("touchstart mousedown.xdsoft", ".xdsoft_option", function () { void 0 !== P.currentTime && null !== P.currentTime || (P.currentTime = P.now()); var t = P.currentTime.getFullYear(); P && P.currentTime && P.currentTime[e(this).parent().parent().hasClass("xdsoft_monthselect") ? "setMonth" : "setFullYear"](e(this).data("value")), e(this).parent().parent().hide(), Y.trigger("xchange.xdsoft"), F.onChangeMonth && e.isFunction(F.onChangeMonth) && F.onChangeMonth.call(Y, P.currentTime, Y.data("input")), t !== P.currentTime.getFullYear() && e.isFunction(F.onChangeYear) && F.onChangeYear.call(Y, P.currentTime, Y.data("input")) }), Y.getValue = function () { return P.getCurrentTime() }, Y.setOptions = function (n) { var r = {}; F = e.extend(!0, {}, F, n), n.allowTimes && e.isArray(n.allowTimes) && n.allowTimes.length && (F.allowTimes = e.extend(!0, [], n.allowTimes)), n.weekends && e.isArray(n.weekends) && n.weekends.length && (F.weekends = e.extend(!0, [], n.weekends)), n.allowDates && e.isArray(n.allowDates) && n.allowDates.length && (F.allowDates = e.extend(!0, [], n.allowDates)), n.allowDateRe && "[object String]" === Object.prototype.toString.call(n.allowDateRe) && (F.allowDateRe = new RegExp(n.allowDateRe)), n.highlightedDates && e.isArray(n.highlightedDates) && n.highlightedDates.length && (e.each(n.highlightedDates, function (t, n) { var o, s = e.map(n.split(","), e.trim), d = new i(a.parseDate(s[0], F.formatDate), s[1], s[2]), u = a.formatDate(d.date, F.formatDate); void 0 !== r[u] ? (o = r[u].desc) && o.length && d.desc && d.desc.length && (r[u].desc = o + "\n" + d.desc) : r[u] = d }), F.highlightedDates = e.extend(!0, [], r)), n.highlightedPeriods && e.isArray(n.highlightedPeriods) && n.highlightedPeriods.length && (r = e.extend(!0, [], F.highlightedDates), e.each(n.highlightedPeriods, function (t, n) { var o, s, d, u, l, f, c; if (e.isArray(n)) o = n[0], s = n[1], d = n[2], c = n[3]; else { var h = e.map(n.split(","), e.trim); o = a.parseDate(h[0], F.formatDate), s = a.parseDate(h[1], F.formatDate), d = h[2], c = h[3] } for (; o <= s;)u = new i(o, d, c), l = a.formatDate(o, F.formatDate), o.setDate(o.getDate() + 1), void 0 !== r[l] ? (f = r[l].desc) && f.length && u.desc && u.desc.length && (r[l].desc = f + "\n" + u.desc) : r[l] = u }), F.highlightedDates = e.extend(!0, [], r)), n.disabledDates && e.isArray(n.disabledDates) && n.disabledDates.length && (F.disabledDates = e.extend(!0, [], n.disabledDates)), n.disabledWeekDays && e.isArray(n.disabledWeekDays) && n.disabledWeekDays.length && (F.disabledWeekDays = e.extend(!0, [], n.disabledWeekDays)), !F.open && !F.opened || F.inline || t.trigger("open.xdsoft"), F.inline && (V = !0, Y.addClass("xdsoft_inline"), t.after(Y).hide()), F.inverseButton && (F.next = "xdsoft_prev", F.prev = "xdsoft_next"), F.datepicker ? H.addClass("active") : H.removeClass("active"), F.timepicker ? I.addClass("active") : I.removeClass("active"), F.value && (P.setCurrentTime(F.value), t && t.val && t.val(P.str)), isNaN(F.dayOfWeekStart) ? F.dayOfWeekStart = 0 : F.dayOfWeekStart = parseInt(F.dayOfWeekStart, 10) % 7, F.timepickerScrollbar || N.xdsoftScroller(F, "hide"), F.minDate && /^[\+\-](.*)$/.test(F.minDate) && (F.minDate = a.formatDate(P.strToDateTime(F.minDate), F.formatDate)), F.maxDate && /^[\+\-](.*)$/.test(F.maxDate) && (F.maxDate = a.formatDate(P.strToDateTime(F.maxDate), F.formatDate)), E.toggle(F.showApplyButton), J.find(".xdsoft_today_button").css("visibility", F.todayButton ? "visible" : "hidden"), J.find("." + F.prev).css("visibility", F.prevButton ? "visible" : "hidden"), J.find("." + F.next).css("visibility", F.nextButton ? "visible" : "hidden"), q(F), F.validateOnBlur && t.off("blur.xdsoft").on("blur.xdsoft", function () { if (F.allowBlank && (!e.trim(e(this).val()).length || "string" == typeof F.mask && e.trim(e(this).val()) === F.mask.replace(/[0-9]/g, "_"))) e(this).val(null), Y.data("xdsoft_datetime").empty(); else { var t = a.parseDate(e(this).val(), F.format); if (t) e(this).val(a.formatDate(t, F.format)); else { var n = +[e(this).val()[0], e(this).val()[1]].join(""), r = +[e(this).val()[2], e(this).val()[3]].join(""); !F.datepicker && F.timepicker && n >= 0 && n < 24 && r >= 0 && r < 60 ? e(this).val([n, r].map(function (e) { return e > 9 ? e : "0" + e }).join(":")) : e(this).val(a.formatDate(P.now(), F.format)) } Y.data("xdsoft_datetime").setCurrentTime(e(this).val()) } Y.trigger("changedatetime.xdsoft"), Y.trigger("close.xdsoft") }), F.dayOfWeekStartPrev = 0 === F.dayOfWeekStart ? 6 : F.dayOfWeekStart - 1, Y.trigger("xchange.xdsoft").trigger("afterOpen.xdsoft") }, Y.data("options", F).on("touchstart mousedown.xdsoft", function (e) { return e.stopPropagation(), e.preventDefault(), B.hide(), R.hide(), !1 }), N.append(L), N.xdsoftScroller(F), Y.on("afterOpen.xdsoft", function () { N.xdsoftScroller(F) }), Y.append(H).append(I), !0 !== F.withoutCopyright && Y.append(j), H.append(J).append(z).append(E), e(F.parentID).append(Y), P = new function () { var t = this; t.now = function (e) { var a, n, r = new Date; return !e && F.defaultDate && (a = t.strToDateTime(F.defaultDate), r.setDate(1), r.setFullYear(a.getFullYear()), r.setMonth(a.getMonth()), r.setDate(a.getDate())), F.yearOffset && r.setFullYear(r.getFullYear() + F.yearOffset), !e && F.defaultTime && (n = t.strtotime(F.defaultTime), r.setHours(n.getHours()), r.setMinutes(n.getMinutes())), r }, t.isValidDate = function (e) { return "[object Date]" === Object.prototype.toString.call(e) && !isNaN(e.getTime()) }, t.setCurrentTime = function (e, a) { "string" == typeof e ? t.currentTime = t.strToDateTime(e) : t.isValidDate(e) ? t.currentTime = e : e || a || !F.allowBlank ? t.currentTime = t.now() : t.currentTime = null, Y.trigger("xchange.xdsoft") }, t.empty = function () { t.currentTime = null }, t.getCurrentTime = function (e) { return t.currentTime }, t.nextMonth = function () { void 0 !== t.currentTime && null !== t.currentTime || (t.currentTime = t.now()); var a, n = t.currentTime.getMonth() + 1; return 12 === n && (t.currentTime.setFullYear(t.currentTime.getFullYear() + 1), n = 0), a = t.currentTime.getFullYear(), t.currentTime.setDate(Math.min(new Date(t.currentTime.getFullYear(), n + 1, 0).getDate(), t.currentTime.getDate())), t.currentTime.setMonth(n), F.onChangeMonth && e.isFunction(F.onChangeMonth) && F.onChangeMonth.call(Y, P.currentTime, Y.data("input")), a !== t.currentTime.getFullYear() && e.isFunction(F.onChangeYear) && F.onChangeYear.call(Y, P.currentTime, Y.data("input")), Y.trigger("xchange.xdsoft"), n }, t.prevMonth = function () { void 0 !== t.currentTime && null !== t.currentTime || (t.currentTime = t.now()); var a = t.currentTime.getMonth() - 1; return -1 === a && (t.currentTime.setFullYear(t.currentTime.getFullYear() - 1), a = 11), t.currentTime.setDate(Math.min(new Date(t.currentTime.getFullYear(), a + 1, 0).getDate(), t.currentTime.getDate())), t.currentTime.setMonth(a), F.onChangeMonth && e.isFunction(F.onChangeMonth) && F.onChangeMonth.call(Y, P.currentTime, Y.data("input")), Y.trigger("xchange.xdsoft"), a }, t.getWeekOfYear = function (t) { if (F.onGetWeekOfYear && e.isFunction(F.onGetWeekOfYear)) { var a = F.onGetWeekOfYear.call(Y, t); if (void 0 !== a) return a } var n = new Date(t.getFullYear(), 0, 1); return 4 != n.getDay() && n.setMonth(0, 1 + (4 - n.getDay() + 7) % 7), Math.ceil(((t - n) / 864e5 + n.getDay() + 1) / 7) }, t.strToDateTime = function (e) { var n, r, o = []; return e && e instanceof Date && t.isValidDate(e) ? e : ((o = /^(\+|\-)(.*)$/.exec(e)) && (o[2] = a.parseDate(o[2], F.formatDate)), o && o[2] ? (n = o[2].getTime() - 6e4 * o[2].getTimezoneOffset(), r = new Date(t.now(!0).getTime() + parseInt(o[1] + "1", 10) * n)) : r = e ? a.parseDate(e, F.format) : t.now(), t.isValidDate(r) || (r = t.now()), r) }, t.strToDate = function (e) { if (e && e instanceof Date && t.isValidDate(e)) return e; var n = e ? a.parseDate(e, F.formatDate) : t.now(!0); return t.isValidDate(n) || (n = t.now(!0)), n }, t.strtotime = function (e) { if (e && e instanceof Date && t.isValidDate(e)) return e; var n = e ? a.parseDate(e, F.formatTime) : t.now(!0); return t.isValidDate(n) || (n = t.now(!0)), n }, t.str = function () { return a.formatDate(t.currentTime, F.format) }, t.currentTime = this.now() }, E.on("touchend click", function (e) { e.preventDefault(), Y.data("changed", !0), P.setCurrentTime(U()), t.val(P.str()), Y.trigger("close.xdsoft") }), J.find(".xdsoft_today_button").on("touchend mousedown.xdsoft", function () { Y.data("changed", !0), P.setCurrentTime(0, !0), Y.trigger("afterOpen.xdsoft") }).on("dblclick.xdsoft", function () { var e, a, n = P.getCurrentTime(); n = new Date(n.getFullYear(), n.getMonth(), n.getDate()), e = P.strToDate(F.minDate), n < (e = new Date(e.getFullYear(), e.getMonth(), e.getDate())) || (a = P.strToDate(F.maxDate), n > (a = new Date(a.getFullYear(), a.getMonth(), a.getDate())) || (t.val(P.str()), t.trigger("change"), Y.trigger("close.xdsoft"))) }), J.find(".xdsoft_prev,.xdsoft_next").on("touchend mousedown.xdsoft", function () { var t = e(this), a = 0, n = !1; !function e(r) { t.hasClass(F.next) ? P.nextMonth() : t.hasClass(F.prev) && P.prevMonth(), F.monthChangeSpinner && (n || (a = setTimeout(e, r || 100))) }(500), e([F.ownerDocument.body, F.contentWindow]).on("touchend mouseup.xdsoft", function t() { clearTimeout(a), n = !0, e([F.ownerDocument.body, F.contentWindow]).off("touchend mouseup.xdsoft", t) }) }), I.find(".xdsoft_prev,.xdsoft_next").on("touchend mousedown.xdsoft", function () { var t = e(this), a = 0, n = !1, r = 110; !function e(o) { var i = N[0].clientHeight, s = L[0].offsetHeight, d = Math.abs(parseInt(L.css("marginTop"), 10)); t.hasClass(F.next) && s - i - F.timeHeightInTimePicker >= d ? L.css("marginTop", "-" + (d + F.timeHeightInTimePicker) + "px") : t.hasClass(F.prev) && d - F.timeHeightInTimePicker >= 0 && L.css("marginTop", "-" + (d - F.timeHeightInTimePicker) + "px"), N.trigger("scroll_element.xdsoft_scroller", [Math.abs(parseInt(L[0].style.marginTop, 10) / (s - i))]), r = r > 10 ? 10 : r - 10, n || (a = setTimeout(e, o || r)) }(500), e([F.ownerDocument.body, F.contentWindow]).on("touchend mouseup.xdsoft", function t() { clearTimeout(a), n = !0, e([F.ownerDocument.body, F.contentWindow]).off("touchend mouseup.xdsoft", t) }) }), o = 0, Y.on("xchange.xdsoft", function (i) { clearTimeout(o), o = setTimeout(function () { if (void 0 === P.currentTime || null === P.currentTime) { if (F.allowBlank) return; P.currentTime = P.now() } for (var o, i, s, d, u, l, f, c, h, m, g = "", p = new Date(P.currentTime.getFullYear(), P.currentTime.getMonth(), 1, 12, 0, 0), y = 0, D = P.now(), b = !1, v = !1, k = [], x = !0, S = ""; p.getDay() !== F.dayOfWeekStart;)p.setDate(p.getDate() - 1); for (g += "<table><thead><tr>", F.weeks && (g += "<th></th>"), o = 0; o < 7; o += 1)g += "<th>" + F.i18n[n].dayOfWeekShort[(o + F.dayOfWeekStart) % 7] + "</th>"; for (g += "</tr></thead>", g += "<tbody>", !1 !== F.maxDate && (b = P.strToDate(F.maxDate), b = new Date(b.getFullYear(), b.getMonth(), b.getDate(), 23, 59, 59, 999)), !1 !== F.minDate && (v = P.strToDate(F.minDate), v = new Date(v.getFullYear(), v.getMonth(), v.getDate())); y < P.currentTime.countDaysInMonth() || p.getDay() !== F.dayOfWeekStart || P.currentTime.getMonth() === p.getMonth();)k = [], y += 1, s = p.getDay(), d = p.getDate(), u = p.getFullYear(), l = p.getMonth(), f = P.getWeekOfYear(p), m = "", k.push("xdsoft_date"), c = F.beforeShowDay && e.isFunction(F.beforeShowDay.call) ? F.beforeShowDay.call(Y, p) : null, F.allowDateRe && "[object RegExp]" === Object.prototype.toString.call(F.allowDateRe) ? F.allowDateRe.test(a.formatDate(p, F.formatDate)) || k.push("xdsoft_disabled") : F.allowDates && F.allowDates.length > 0 ? -1 === F.allowDates.indexOf(a.formatDate(p, F.formatDate)) && k.push("xdsoft_disabled") : !1 !== b && p > b || !1 !== v && p < v || c && !1 === c[0] ? k.push("xdsoft_disabled") : -1 !== F.disabledDates.indexOf(a.formatDate(p, F.formatDate)) ? k.push("xdsoft_disabled") : -1 !== F.disabledWeekDays.indexOf(s) ? k.push("xdsoft_disabled") : t.is("[readonly]") && k.push("xdsoft_disabled"), c && "" !== c[1] && k.push(c[1]), P.currentTime.getMonth() !== l && k.push("xdsoft_other_month"), (F.defaultSelect || Y.data("changed")) && a.formatDate(P.currentTime, F.formatDate) === a.formatDate(p, F.formatDate) && k.push("xdsoft_current"), a.formatDate(D, F.formatDate) === a.formatDate(p, F.formatDate) && k.push("xdsoft_today"), 0 !== p.getDay() && 6 !== p.getDay() && -1 === F.weekends.indexOf(a.formatDate(p, F.formatDate)) || k.push("xdsoft_weekend"), void 0 !== F.highlightedDates[a.formatDate(p, F.formatDate)] && (i = F.highlightedDates[a.formatDate(p, F.formatDate)], k.push(void 0 === i.style ? "xdsoft_highlighted_default" : i.style), m = void 0 === i.desc ? "" : i.desc), F.beforeShowDay && e.isFunction(F.beforeShowDay) && k.push(F.beforeShowDay(p)), x && (g += "<tr>", x = !1, F.weeks && (g += "<th>" + f + "</th>")), g += '<td data-date="' + d + '" data-month="' + l + '" data-year="' + u + '" class="xdsoft_date xdsoft_day_of_week' + p.getDay() + " " + k.join(" ") + '" title="' + m + '"><div>' + d + "</div></td>", p.getDay() === F.dayOfWeekStartPrev && (g += "</tr>", x = !0), p.setDate(d + 1); if (g += "</tbody></table>", z.html(g), J.find(".xdsoft_label span").eq(0).text(F.i18n[n].months[P.currentTime.getMonth()]), J.find(".xdsoft_label span").eq(1).text(P.currentTime.getFullYear()), S = "", "", l = "", h = function (n, r) { var o, i, s = P.now(), d = F.allowTimes && e.isArray(F.allowTimes) && F.allowTimes.length; s.setHours(n), n = parseInt(s.getHours(), 10), s.setMinutes(r), r = parseInt(s.getMinutes(), 10), (o = new Date(P.currentTime)).setHours(n), o.setMinutes(r), k = [], !1 !== F.minDateTime && F.minDateTime > o || !1 !== F.maxTime && P.strtotime(F.maxTime).getTime() < s.getTime() || !1 !== F.minTime && P.strtotime(F.minTime).getTime() > s.getTime() ? k.push("xdsoft_disabled") : !1 !== F.minDateTime && F.minDateTime > o || !1 !== F.disabledMinTime && s.getTime() > P.strtotime(F.disabledMinTime).getTime() && !1 !== F.disabledMaxTime && s.getTime() < P.strtotime(F.disabledMaxTime).getTime() ? k.push("xdsoft_disabled") : t.is("[readonly]") && k.push("xdsoft_disabled"), (i = new Date(P.currentTime)).setHours(parseInt(P.currentTime.getHours(), 10)), d || i.setMinutes(Math[F.roundTime](P.currentTime.getMinutes() / F.step) * F.step), (F.initTime || F.defaultSelect || Y.data("changed")) && i.getHours() === parseInt(n, 10) && (!d && F.step > 59 || i.getMinutes() === parseInt(r, 10)) && (F.defaultSelect || Y.data("changed") ? k.push("xdsoft_current") : F.initTime && k.push("xdsoft_init_time")), parseInt(D.getHours(), 10) === parseInt(n, 10) && parseInt(D.getMinutes(), 10) === parseInt(r, 10) && k.push("xdsoft_today"), S += '<div class="xdsoft_time ' + k.join(" ") + '" data-hour="' + n + '" data-minute="' + r + '">' + a.formatDate(s, F.formatTime) + "</div>" }, F.allowTimes && e.isArray(F.allowTimes) && F.allowTimes.length) for (y = 0; y < F.allowTimes.length; y += 1)h(P.strtotime(F.allowTimes[y]).getHours(), l = P.strtotime(F.allowTimes[y]).getMinutes()); else for (y = 0, o = 0; y < (F.hours12 ? 12 : 24); y += 1)for (o = 0; o < 60; o += F.step)h((y < 10 ? "0" : "") + y, l = (o < 10 ? "0" : "") + o); for (L.html(S), r = "", y = 0, y = parseInt(F.yearStart, 10) + F.yearOffset; y <= parseInt(F.yearEnd, 10) + F.yearOffset; y += 1)r += '<div class="xdsoft_option ' + (P.currentTime.getFullYear() === y ? "xdsoft_current" : "") + '" data-value="' + y + '">' + y + "</div>"; for (B.children().eq(0).html(r), y = parseInt(F.monthStart, 10), r = ""; y <= parseInt(F.monthEnd, 10); y += 1)r += '<div class="xdsoft_option ' + (P.currentTime.getMonth() === y ? "xdsoft_current" : "") + '" data-value="' + y + '">' + F.i18n[n].months[y] + "</div>"; R.children().eq(0).html(r), e(Y).trigger("generate.xdsoft") }, 10), i.stopPropagation() }).on("afterOpen.xdsoft", function () { var e, t, a, n; F.timepicker && (L.find(".xdsoft_current").length ? e = ".xdsoft_current" : L.find(".xdsoft_init_time").length && (e = ".xdsoft_init_time"), e ? (t = N[0].clientHeight, (a = L[0].offsetHeight) - t < (n = L.find(e).index() * F.timeHeightInTimePicker + 1) && (n = a - t), N.trigger("scroll_element.xdsoft_scroller", [parseInt(n, 10) / (a - t)])) : N.trigger("scroll_element.xdsoft_scroller", [0])) }), s = 0, z.on("touchend click.xdsoft", "td", function (a) { a.stopPropagation(), s += 1; var n = e(this), r = P.currentTime; if (null == r && (P.currentTime = P.now(), r = P.currentTime), n.hasClass("xdsoft_disabled")) return !1; r.setDate(1), r.setFullYear(n.data("year")), r.setMonth(n.data("month")), r.setDate(n.data("date")), Y.trigger("select.xdsoft", [r]), t.val(P.str()), F.onSelectDate && e.isFunction(F.onSelectDate) && F.onSelectDate.call(Y, P.currentTime, Y.data("input"), a), Y.data("changed", !0), Y.trigger("xchange.xdsoft"), Y.trigger("changedatetime.xdsoft"), (s > 1 || !0 === F.closeOnDateSelect || !1 === F.closeOnDateSelect && !F.timepicker) && !F.inline && Y.trigger("close.xdsoft"), setTimeout(function () { s = 0 }, 200) }), L.on("touchend click.xdsoft", "div", function (t) { t.stopPropagation(); var a = e(this), n = P.currentTime; if (null == n && (P.currentTime = P.now(), n = P.currentTime), a.hasClass("xdsoft_disabled")) return !1; n.setHours(a.data("hour")), n.setMinutes(a.data("minute")), Y.trigger("select.xdsoft", [n]), Y.data("input").val(P.str()), F.onSelectTime && e.isFunction(F.onSelectTime) && F.onSelectTime.call(Y, P.currentTime, Y.data("input"), t), Y.data("changed", !0), Y.trigger("xchange.xdsoft"), Y.trigger("changedatetime.xdsoft"), !0 !== F.inline && !0 === F.closeOnTimeSelect && Y.trigger("close.xdsoft") }), H.on("mousewheel.xdsoft", function (e) { return !F.scrollMonth || (e.deltaY < 0 ? P.nextMonth() : P.prevMonth(), !1) }), t.on("mousewheel.xdsoft", function (e) { return !F.scrollInput || (!F.datepicker && F.timepicker ? ((d = L.find(".xdsoft_current").length ? L.find(".xdsoft_current").eq(0).index() : 0) + e.deltaY >= 0 && d + e.deltaY < L.children().length && (d += e.deltaY), L.children().eq(d).length && L.children().eq(d).trigger("mousedown"), !1) : F.datepicker && !F.timepicker ? (H.trigger(e, [e.deltaY, e.deltaX, e.deltaY]), t.val && t.val(P.str()), Y.trigger("changedatetime.xdsoft"), !1) : void 0) }), Y.on("changedatetime.xdsoft", function (t) { if (F.onChangeDateTime && e.isFunction(F.onChangeDateTime)) { var a = Y.data("input"); F.onChangeDateTime.call(Y, P.currentTime, a, t), delete F.value, a.trigger("change") } }).on("generate.xdsoft", function () { F.onGenerate && e.isFunction(F.onGenerate) && F.onGenerate.call(Y, P.currentTime, Y.data("input")), V && (Y.trigger("afterOpen.xdsoft"), V = !1) }).on("click.xdsoft", function (e) { e.stopPropagation() }), d = 0, A = function (e, t) { do { if (!1 === t(e = e.parentNode)) break } while ("HTML" !== e.nodeName) }, u = function () { var t, a, n, r, o, i, s, d, u, l, f, c, h; if (t = (d = Y.data("input")).offset(), a = d[0], l = "top", n = t.top + a.offsetHeight - 1, r = t.left, o = "absolute", u = e(F.contentWindow).width(), c = e(F.contentWindow).height(), h = e(F.contentWindow).scrollTop(), F.ownerDocument.documentElement.clientWidth - t.left < H.parent().outerWidth(!0)) { var m = H.parent().outerWidth(!0) - a.offsetWidth; r -= m } "rtl" === d.parent().css("direction") && (r -= Y.outerWidth() - d.outerWidth()), F.fixed ? (n + Y.outerHeight() > c + h ? (l = "bottom", n = c + h - t.top) : n -= h, r -= e(F.contentWindow).scrollLeft(), o = "fixed") : (s = !1, A(a, function (e) { if ("fixed" === F.contentWindow.getComputedStyle(e).getPropertyValue("position")) return s = !0, !1 }), s ? (o = "fixed", n + Y.outerHeight() > c + h ? (l = "bottom", n = c + h - t.top) : n -= h) : n + Y.outerHeight() > c + h ? n = t.top - Y.outerHeight() - 1 : n + a.offsetHeight > c + h && (n = t.top - a.offsetHeight + 1), n < 0 && (n = 0), r + a.offsetWidth > u && (r = u - a.offsetWidth)), i = Y[0], A(i, function (e) { if ("relative" === F.contentWindow.getComputedStyle(e).getPropertyValue("position") && u >= e.offsetWidth) return r -= (u - e.offsetWidth) / 2, !1 }), (f = { position: o, left: r, top: "", bottom: "" })[l] = n, Y.css(f) }, Y.on("open.xdsoft", function (t) { var a = !0; F.onShow && e.isFunction(F.onShow) && (a = F.onShow.call(Y, P.currentTime, Y.data("input"), t)), !1 !== a && (Y.show(), u(), e(F.contentWindow).off("resize.xdsoft", u).on("resize.xdsoft", u), F.closeOnWithoutClick && e([F.ownerDocument.body, F.contentWindow]).on("touchstart mousedown.xdsoft", function t() { Y.trigger("close.xdsoft"), e([F.ownerDocument.body, F.contentWindow]).off("touchstart mousedown.xdsoft", t) })) }).on("close.xdsoft", function (t) { var a = !0; J.find(".xdsoft_month,.xdsoft_year").find(".xdsoft_select").hide(), F.onClose && e.isFunction(F.onClose) && (a = F.onClose.call(Y, P.currentTime, Y.data("input"), t)), !1 === a || F.opened || F.inline || Y.hide(), t.stopPropagation() }).on("toggle.xdsoft", function () { Y.is(":visible") ? Y.trigger("close.xdsoft") : Y.trigger("open.xdsoft") }).data("input", t), G = 0, Y.data("xdsoft_datetime", P), Y.setOptions(F), P.setCurrentTime(U()), t.data("xdsoft_datetimepicker", Y).on("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", function () { t.is(":disabled") || t.data("xdsoft_datetimepicker").is(":visible") && F.closeOnInputClick || (clearTimeout(G), G = setTimeout(function () { t.is(":disabled") || (V = !0, P.setCurrentTime(U(), !0), F.mask && q(F), Y.trigger("open.xdsoft")) }, 100)) }).on("keydown.xdsoft", function (t) { var a, n = t.which; return -1 !== [p].indexOf(n) && F.enterLikeTab ? (a = e("input:visible,textarea:visible,button:visible,a:visible"), Y.trigger("close.xdsoft"), a.eq(a.index(this) + 1).focus(), !1) : -1 !== [S].indexOf(n) ? (Y.trigger("close.xdsoft"), !0) : void 0 }).on("blur.xdsoft", function () { F.mask && q(F), Y.trigger("close.xdsoft") }) }, d = function (t) { var a = t.data("xdsoft_datetimepicker"); a && (a.data("xdsoft_datetime", null), a.remove(), t.data("xdsoft_datetimepicker", null).off(".xdsoft"), e(F.contentWindow).off("resize.xdsoft"), e([F.contentWindow, F.ownerDocument.body]).off("mousedown.xdsoft touchstart"), t.unmousewheel && t.unmousewheel()) }, e(F.ownerDocument).off("keydown.xdsoftctrl keyup.xdsoftctrl").on("keydown.xdsoftctrl", function (e) { e.keyCode === m && (C = !0) }).on("keyup.xdsoftctrl", function (e) { e.keyCode === m && (C = !1) }), this.each(function () { var t, n = e(this).data("xdsoft_datetimepicker"); if (n) { if ("string" === e.type(r)) switch (r) { case "show": e(this).select().focus(), n.trigger("open.xdsoft"); break; case "hide": n.trigger("close.xdsoft"); break; case "toggle": n.trigger("toggle.xdsoft"); break; case "destroy": d(e(this)); break; case "reset": this.value = this.defaultValue, this.value && n.data("xdsoft_datetime").isValidDate(a.parseDate(this.value, F.format)) || n.data("changed", !1), n.data("xdsoft_datetime").setCurrentTime(this.value); break; case "validate": n.data("input").trigger("blur.xdsoft"); break; default: n[r] && e.isFunction(n[r]) && (u = n[r](o)) } else n.setOptions(r); return 0 } "string" !== e.type(r) && (!F.lazyInit || F.open || F.inline ? s(e(this)) : (t = e(this)).on("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", function e() { t.is(":disabled") || t.data("xdsoft_datetimepicker") || (clearTimeout(P), P = setTimeout(function () { t.data("xdsoft_datetimepicker") || s(t), t.off("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", e).trigger("open.xdsoft") }, 100)) })) }), u }, e.fn.datetimepicker.defaults = t }), function (e) { "function" == typeof define && define.amd ? define(["jquery"], e) : "object" == typeof exports ? module.exports = e : e(jQuery) }(function (e) { var t, a, n = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"], r = "onwheel" in document || document.documentMode >= 9 ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"], o = Array.prototype.slice; if (e.event.fixHooks) for (var i = n.length; i;)e.event.fixHooks[n[--i]] = e.event.mouseHooks; var s = e.event.special.mousewheel = { version: "3.1.12", setup: function () { if (this.addEventListener) for (var t = r.length; t;)this.addEventListener(r[--t], d, !1); else this.onmousewheel = d; e.data(this, "mousewheel-line-height", s.getLineHeight(this)), e.data(this, "mousewheel-page-height", s.getPageHeight(this)) }, teardown: function () { if (this.removeEventListener) for (var t = r.length; t;)this.removeEventListener(r[--t], d, !1); else this.onmousewheel = null; e.removeData(this, "mousewheel-line-height"), e.removeData(this, "mousewheel-page-height") }, getLineHeight: function (t) { var a = e(t), n = a["offsetParent" in e.fn ? "offsetParent" : "parent"](); return n.length || (n = e("body")), parseInt(n.css("fontSize"), 10) || parseInt(a.css("fontSize"), 10) || 16 }, getPageHeight: function (t) { return e(t).height() }, settings: { adjustOldDeltas: !0, normalizeOffset: !0 } }; function d(n) { var r, i = n || window.event, d = o.call(arguments, 1), f = 0, c = 0, h = 0, m = 0, g = 0; if ((n = e.event.fix(i)).type = "mousewheel", "detail" in i && (h = -1 * i.detail), "wheelDelta" in i && (h = i.wheelDelta), "wheelDeltaY" in i && (h = i.wheelDeltaY), "wheelDeltaX" in i && (c = -1 * i.wheelDeltaX), "axis" in i && i.axis === i.HORIZONTAL_AXIS && (c = -1 * h, h = 0), f = 0 === h ? c : h, "deltaY" in i && (f = h = -1 * i.deltaY), "deltaX" in i && (c = i.deltaX, 0 === h && (f = -1 * c)), 0 !== h || 0 !== c) { if (1 === i.deltaMode) { var p = e.data(this, "mousewheel-line-height"); f *= p, h *= p, c *= p } else if (2 === i.deltaMode) { var y = e.data(this, "mousewheel-page-height"); f *= y, h *= y, c *= y } if (r = Math.max(Math.abs(h), Math.abs(c)), (!a || r < a) && (a = r, l(i, r) && (a /= 40)), l(i, r) && (f /= 40, c /= 40, h /= 40), f = Math[f >= 1 ? "floor" : "ceil"](f / a), c = Math[c >= 1 ? "floor" : "ceil"](c / a), h = Math[h >= 1 ? "floor" : "ceil"](h / a), s.settings.normalizeOffset && this.getBoundingClientRect) { var D = this.getBoundingClientRect(); m = n.clientX - D.left, g = n.clientY - D.top } return n.deltaX = c, n.deltaY = h, n.deltaFactor = a, n.offsetX = m, n.offsetY = g, n.deltaMode = 0, d.unshift(n, f, c, h), t && clearTimeout(t), t = setTimeout(u, 200), (e.event.dispatch || e.event.handle).apply(this, d) } } function u() { a = null } function l(e, t) { return s.settings.adjustOldDeltas && "mousewheel" === e.type && t % 120 == 0 } e.fn.extend({ mousewheel: function (e) { return e ? this.bind("mousewheel", e) : this.trigger("mousewheel") }, unmousewheel: function (e) { return this.unbind("mousewheel", e) } }) });